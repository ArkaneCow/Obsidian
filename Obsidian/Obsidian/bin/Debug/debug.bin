When this category is loaded, an AIML bot will respond to the input "What is your name" with the response "My name is John."</p><h3><span class="editsection">[<a href="/w/index.php?title=AIML&amp;action=edit&amp;section=4" title="Edit section: Patterns">edit</a>]</span> <span class="mw-headline" id="Patterns">Patterns</span></h3><p>A pattern is a string of characters intended to match one or more user inputs. A literal pattern like</p><pre> WHAT IS YOUR NAME</pre><p>will match only one input, ignoring case: "what is your name". But patterns may also contain wildcards, which match one or more words. A pattern like</p><pre> WHAT IS YOUR *</pre><p>will match an infinite number of inputs, including "what is your name", "what is your shoe size", "what is your purpose in life", etc.</p><p>The AIML pattern syntax is a very simple pattern language, substantially less complex than <a href="/wiki/Regular_expressions" title="Regular expressions" class="mw-redirect">regular expressions</a> and as such not even of level 3 in the <a href="/wiki/Chomsky_hierarchy" title="Chomsky hierarchy">Chomsky hierarchy</a>. To compensate for the simple <a href="/wiki/Pattern_matching" title="Pattern matching">pattern matching</a> capabilities, AIML interpreters can provide preprocessing functions to expand abbreviations, remove misspellings, etc.</p><h3><span class="editsection">[<a href="/w/index.php?title=AIML&amp;action=edit&amp;section=5" title="Edit section: Templates">edit</a>]</span> <span class="mw-headline" id="Templates">Templates</span></h3><p>A template specifies the response to a matched pattern. A template may be as simple as some literal text, like</p><pre>  My name is John.</pre><p>A template may use variables, such as the example</p><pre> My name is &lt;bot name="name"/&gt;.</pre><p>which will substitute the bot's name into the sentence, or</p><pre> You told me you are &lt;get name="user-age"/&gt; years old.</pre><p>which will substitute the user's age (if known) into the sentence.</p><p>Template elements include basic text formatting, conditional response (if-then/else), and random responses.</p><p>Templates may also redirect to other patterns, using an element called <b>srai</b>. This can be used to implement synonymy, as in this example (where <a href="/wiki/CDATA" title="CDATA">CDATA</a> is used to avoid the need for <a href="/wiki/XML#Escaping" title="XML">XML escaping</a>):</p><div dir="ltr" class="mw-geshi mw-content-ltr"><div class="xml source-xml"><pre class="de1"><span class="sc3"><span class="re1">&lt;category<span class="re2">&gt;</span></span></span>  <span class="sc3"><span class="re1">&lt;pattern<span class="re2">&gt;</span></span></span>WHAT IS YOUR NAME<span class="sc3"><span class="re1">&lt;/pattern<span class="re2">&gt;</span></span></span>  <span class="sc3"><span class="re1">&lt;template<span class="re2">&gt;</span></span></span><span class="sc2">&lt;![CDATA[My name is &lt;bot name="name"/&gt;.]]&gt;</span><span class="sc3"><span class="re1">&lt;/template<span class="re2">&gt;</span></span></span><span class="sc3"><span class="re1">&lt;/category<span class="re2">&gt;</span></span></span><span class="sc3"><span class="re1">&lt;category<span class="re2">&gt;</span></span></span>  <span class="sc3"><span class="re1">&lt;pattern<span class="re2">&gt;</span></span></span>WHAT ARE YOU CALLED<span class="sc3"><span class="re1">&lt;/pattern<span class="re2">&gt;</span></span></span>  <span class="sc3"><span class="re1">&lt;template<span class="re2">&gt;</span></span></span>    <span class="sc3"><span class="re1">&lt;srai<span class="re2">&gt;</span></span></span>what is your name<span class="sc3"><span class="re1">&lt;/srai<span class="re2">&gt;</span></span></span>  <span class="sc3"><span class="re1">&lt;/template<span class="re2">&gt;</span></span></span><span class="sc3"><span class="re1">&lt;/category<span class="re2">&gt;</span></span></span></pre></div>